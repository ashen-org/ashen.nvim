local M = {}

local util = require("ashen.util")
local c = require("ashen.colors").colors

local map = {
  Normal = { c.a_4, c.background },
  Search = { nil, c.a_8 },
  IncSearch = { c.a_0, c.a_7 },
  Substitute = { nil, c.a_8 },
  CurSearch = { c.a_9, c.a_2 },
  Visual = { nil, c.a_8 },
  SignColumn = { nil, c.background },
  LineNr = { c.a_8, c.background },
  EndOfBuffer = { c.a_8, nil },

  Character = { c.a_5, nil },
  Identifier = { c.a_0, nil },
  Statement = { c.a_1, nil },
  PreProc = { c.red, nil },
  Type = { c.red_light, nil },
  Special = { c.a_5, nil },
  Error = { c.red, nil },
  Todo = { c.red, c.a_8 },
  Function = { c.a_0, nil },

  ColorColumn = { nil, c.a_8 },
  Conceal = { c.a_7, nil },
  Cursor = { nil, nil },
  CursorColumn = { nil, c.a_9 },
  CursorLine = { nil, c.a_9 },
  CursorLineNr = { c.a_6, c.a_9 },
  Directory = { c.a_3, nil },
  DiffAdd = { c.red, c.a_8 },
  DiffChange = { c.a_0, c.a_6 },
  DiffDelete = { c.red_light, c.a_8 },
  DiffText = { c.a_0, c.a_7 },
  VertSplit = { c.a_8, c.a_9 },
  WinSeparator = { c.a_8, c.a_9 },

  Folded = { c.a_5, c.a_8 },
  FoldColumn = { c.a_7, nil },
  MatchParen = { nil, c.a_7 },
  MoreMsg = { nil, c.a_6 },
  Pmenu = { c.a_2, c.a_8 },
  PmenuSel = { c.a_0, c.a_7 },
  PmenuSbar = { nil, c.a_8 },
  PmenuThumb = { nil, c.a_7 },
  Question = { c.a_1, c.a_8 },
  SpecialKey = { c.a_6, nil },
  SpellLocal = { c.a_5, nil },
  SpellRare = { c.red, nil },
  StatusLine = { c.a_5, c.a_8 },
  TabLine = { c.a_3, c.a_8 },
  TabLineFill = { nil, c.a_8 },
  TabLineSel = { c.a_2, nil },
  VisualNOS = { c.red, c.a_8 },
  WarningMsg = { c.red, nil },
  WildMenu = { c.a_5, c.a_8 },

  FloatBorder = { c.a_7, nil },
  FloatTitle = { c.a_0, nil },
  NormalFloat = { c.a_4, nil },

  ["@character"] = { c.red_light, nil },
  ["@character.special"] = { c.a_2, nil },
  ["@conditional"] = { c.a_2, nil },
  ["@constant.macro"] = { c.red, nil },
  ["@constructor"] = { c.a_1, nil },
  ["@debug"] = { c.a_2, nil },
  ["@define"] = { c.a_2, nil },
  ["@exception"] = { c.a_2, nil },
  ["@field"] = { c.a_2, nil },
  ["@float"] = { c.a_2, nil },
  ["@function"] = { c.a_2, nil },
  ["@function.builtin"] = { c.a_2, nil },
  ["@function.call"] = { c.a_2, nil },
  ["@function.macro"] = { c.red, nil },
  ["@include"] = { c.a_6, nil },
  ["@keyword"] = { c.a_5, nil },
  ["@keyword.function"] = { c.a_5, nil },
  ["@keyword.operator"] = { c.a_6, nil },
  ["@label"] = { c.a_2, nil },
  ["@macro"] = { c.red, nil },
  ["@method"] = { c.a_1, nil },
  ["@method.call"] = { c.a_2, nil },
  ["@namespace"] = { c.a_2, nil },
  ["@none"] = { c.a_3, nil },
  ["@operator"] = { c.a_6, nil },
  ["@parameter"] = { c.a_2, nil },
  ["@preproc"] = { c.a_2, nil },
  ["@property"] = { c.a_2, nil },
  ["@punctuation"] = { c.a_2, nil },
  ["@punctuation.bracket"] = { c.a_6, nil },
  ["@punctuation.delimiter"] = { c.a_6, nil },
  ["@punctuation.special"] = { c.red, nil },
  ["@repeat"] = { c.a_2, nil },
  ["@storageclass"] = { c.a_2, nil },
  ["@string"] = { c.red, nil },
  ["@string.escape"] = { c.a_2, nil },
  ["@string.special"] = { c.a_2, nil },
  ["@structure"] = { c.a_2, nil },
  ["@tag"] = { c.a_6, nil },
  ["@tag.attribute"] = { c.a_4, nil },
  ["@tag.delimiter"] = { c.a_3, nil },
  ["@text.literal"] = { c.red_light, nil },
  ["@text.reference"] = { c.red_light, nil },
  ["@text.title"] = { c.a_2, nil },
  ["@text.todo"] = { c.a_2, nil },
  ["@text.underline"] = { c.a_2, nil },
  ["@text.uri"] = { c.a_2, nil },
  ["@type"] = { c.a_2, nil },
  ["@identifier"] = { c.a_0, nil },
  ["@type.definition"] = { c.a_2, nil },
  ["@variable.builtin"] = { c.a_2, nil },
  ["@lsp.type.function"] = { c.a_0, nil },
  ["@lsp.type.macro"] = { c.red, nil },
  ["@lsp.type.method"] = { c.a_2, nil },

  -- Semantic Highlighting
  DiagnosticSignError = { c.red_bright, nil },
  DiagnosticSignWarn = { c.orange, nil },
  DiagnosticSignInfo = { c.a_2, nil },
  DiagnosticSignHint = { c.a_2, nil },
  DiagnosticHint = { c.a_3 },

  DiagnosticOk = { c.a_2, nil },
  Added = { c.a_1, nil },
  Removed = { c.red, nil },
  Changed = { c.blue, nil },
  ["@markup.link"] = { c.secondary, nil },
  ["@markup.list"] = { c.blue, nil },
  ["@variable"] = { c.blue, nil },
  ["@constant"] = { c.blue, nil },
  ["@constant.builtin"] = { c.blue, nil },
  ["@type.builtin"] = { c.red, nil },
  ["@number"] = { c.secondary, nil },
  NonText = { c.a_7, nil },
  Comment = { c.a_6, nil },
  -- Comment = { c.a_0, nil },
  ["@comment"] = { c.a_6, nil },
  -- ["@comment"] = { c.a_0, nil },
  ["@boolean.go"] = { c.blue, nil },
  ["@boolean"] = { c.blue, nil },
  ["@keyword.return"] = { c.blue, nil },
  Boolean = { c.blue, nil },
  Constant = { c.blue, nil },
  DashboardHeader = { c.red, nil },
  DashboardIcon = { c.red, nil },
  DashboardKey = { c.blue, nil },
  NotifyINFOBorder = { c.blue_dark, nil },
  NotifyINFOTitle = { c.blue, nil },
  NotifyINFOIcon = { c.blue, nil },
  NotifyWARNBorder = { c.orange_dark, nil },
  NotifyWARNTitle = { c.warn, nil },
  NotifyWARNIcon = { c.warn, nil },
  NotifyERRORBorder = { c.error, nil },
  NotifyERRORTitle = { c.error, nil },
  NotifyERRORIcon = { c.error, nil },
  ErrorMsg = { c.a_1, c.error },
  SpellBad = { nil, nil, { undercurl = true } },
  SpellCap = { nil, nil, { undercurl = true } },
  String = { c.red, nil },
  Title = { c.red, nil, { bold = true } },
}

M.setup = function()
  for name, opts in pairs(map) do
    -- print("Setting highlight for:", name) -- Debugging statement
    -- print("Options:", vim.inspect(opts)) -- Debugging statement
    util.hl(name, opts[1], opts[2], opts[3])
  end
end

return M
